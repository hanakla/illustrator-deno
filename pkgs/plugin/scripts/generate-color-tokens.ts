import { dedent } from "jsr:@qnighy/dedent";
import parseCssColor from "npm:parse-css-color";

const tokens = (
  await import(
    import.meta.resolve("npm:@adobe/spectrum-tokens/dist/json/drover.json"),
    { with: { type: "json" } }
  )
).default;

// console.log(tokens.colorThemes);

Deno.writeFileSync(
  new URL("../Source/spectrum-tokens.hpp", import.meta.url),
  processThemes(tokens.colorThemes)
);

function processThemes(themes: any) {
  // const colors = theme.color;
  // const colorKeys = Object.keys(colors);
  // const colorValues = Object.values(colors);

  // const colorKeysStr = colorKeys.map((key) => `  static const auto ${key} = Color(${colors[key].value});`).join("\n");

  // console.log(Object.keys(themes));

  const result = dedent`
    // Auto-generated by generate-color-tokens.ts
    // Do not edit this file manually
    #pragma once
    #ifndef __SPECTRUM_TOKENS_HPP
    #define __SPECTRUM_TOKENS_HPP

    #include "../deps/imgui/imgui.h"

    ${createStruct(themes.light)}
    ${processTheme("spectrumLight", themes.light)}
    ${processTheme("spectrumDark", themes.dark)}
    #endif
  `;

  return new TextEncoder().encode(result);
}

function createStruct(theme: Record<string, string>) {
  let result = "struct SpectrumTokens {\n";

  for (const [key] of Object.entries(theme)) {
    const normKey = normalizeKey(key);
    result += ` ImVec4 ${normKey};\n`;
  }

  result += "};\n";

  return result;
}

function processTheme(name: string, theme: Record<string, string>) {
  let result = `static const SpectrumTokens ${name} {\n`;

  for (const [key, value] of Object.entries(theme)) {
    const normKey = normalizeKey(key);
    const color = parseCssColor(value);

    if (!color) continue;
    if (color.type !== "rgb")
      throw new Error(`Unexpected color type: ${color.type}`);

    const [r, g, b] = color.values;
    console.log(key, r, g, b);
    let cr = toCFloatString(r / 255);
    let cg = toCFloatString(g / 255);
    let cb = toCFloatString(b / 255);

    result += `  .${normKey} = ImVec4(${cr}, ${cg}, ${cb}, 1.0f),\n`;
  }

  result += "};\n";

  return result;
}

function normalizeKey(key: string) {
  return key.replace(/-([a-z0-9])/g, (_, letter) => letter.toUpperCase());
}

function toCFloatString(value: number) {
  if (Number.isInteger(value)) return `${value}.0f`;
  return value.toFixed(4).replace(/0+$/, "") + "f";
}
