name: CI

on: [push]

jobs:
  # ステップ1: macOSホストでRustバインディングをクロスコンパイル
  build_rust_binding:
    name: Build ai-deno bindings (cross-compile)
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin, x86_64-pc-windows-msvc

      - name: Install dependencies for cross-compilation
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-pc-windows-msvc

      - name: Build for macOS (aarch64)
        working-directory: ${{ github.workspace }}/pkgs/ai-deno
        run: |
          cargo build --release --target aarch64-apple-darwin

      - name: Build for Windows (x86_64)
        working-directory: ${{ github.workspace }}/pkgs/ai-deno
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Create directories for artifacts
        run: |
          mkdir -p ${{ github.workspace }}/pkgs/ai-deno/target/macos/includes
          mkdir -p ${{ github.workspace }}/pkgs/ai-deno/target/windows/includes

          # macOSのバイナリとヘッダーをコピー
          cp ${{ github.workspace }}/pkgs/ai-deno/target/aarch64-apple-darwin/release/libai_deno.a ${{ github.workspace }}/pkgs/ai-deno/target/macos/
          # ヘッダーファイルをコピー (実際のパスに合わせて調整)
          cp ${{ github.workspace }}/pkgs/ai-deno/include/libai_deno.h ${{ github.workspace }}/pkgs/ai-deno/target/macos/includes/

          # Windowsのバイナリとヘッダーをコピー
          cp ${{ github.workspace }}/pkgs/ai-deno/target/x86_64-pc-windows-msvc/release/ai_deno.lib ${{ github.workspace }}/pkgs/ai-deno/target/windows/
          # ヘッダーファイルをコピー (実際のパスに合わせて調整)
          cp ${{ github.workspace }}/pkgs/ai-deno/include/libai_deno.h ${{ github.workspace }}/pkgs/ai-deno/target/windows/includes/

      - name: Upload macOS binding artifact
        id: upload-macos-binding
        uses: actions/upload-artifact@v4
        with:
          name: ai-deno-macos
          path: |
            ${{ github.workspace }}/pkgs/ai-deno/target/macos/libai_deno.a
            ${{ github.workspace }}/pkgs/ai-deno/target/macos/includes/
          retention-days: 1
          compression-level: 3
          if-no-files-found: error

      - name: Upload Windows binding artifact
        id: upload-windows-binding
        uses: actions/upload-artifact@v4
        with:
          name: ai-deno-windows
          path: |
            ${{ github.workspace }}/pkgs/ai-deno/target/windows/ai_deno.lib
            ${{ github.workspace }}/pkgs/ai-deno/target/windows/includes/
          retention-days: 1
          compression-level: 3
          if-no-files-found: error

  # ステップ2: macOS版プラグインをビルド
  build_macos_plugin:
    needs: build_rust_binding
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout Illustrator SDK
        uses: actions/checkout@v4
        with:
          repository: "hanakla/illustrator-sdk"
          path: illustrator-sdk

      - name: Download macOS Rust binding artifact
        uses: actions/download-artifact@v4
        with:
          name: ai-deno-macos
          path: ${{ github.workspace }}/pkgs/ai-deno/target/release/

      - name: Select Xcode version
        run: sudo xcode-select -s '/Applications/Xcode_16.0.app/Contents/Developer'

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Build with Xcode
        working-directory: ${{ github.workspace }}/pkgs/plugin
        run: |
          # Xcodeでビルド - PIPL生成はXcodeのビルドフェーズで行われる
          xcodebuild -project AiDenoPlugin.xcodeproj -scheme AiDenoPlugin -configuration Release build

      - name: Upload macOS plugin artifact
        id: upload-macos-artifact
        uses: actions/upload-artifact@v4
        with:
          name: illustrator-deno-macos
          path: ${{ github.workspace }}/pkgs/plugin/output/mac/release/IllustratorDeno.aip
          compression-level: 1
          if-no-files-found: error

      - name: Output artifact info
        if: success()
        run: |
          echo "macOS artifact ID: ${{ steps.upload-macos-artifact.outputs.artifact-id }}"
          echo "Download URL: ${{ steps.upload-macos-artifact.outputs.artifact-url }}"
          echo "SHA-256: ${{ steps.upload-macos-artifact.outputs.artifact-digest }}"

  # ステップ3: Windows版プラグインをビルド
  build_windows_plugin:
    needs: build_rust_binding
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout Illustrator SDK
        uses: actions/checkout@v4
        with:
          repository: "hanakla/illustrator-sdk"
          path: illustrator-sdk

      - name: Download Windows Rust binding artifact
        uses: actions/download-artifact@v4
        with:
          name: ai-deno-windows
          path: ${{ github.workspace }}/pkgs/ai-deno/target/release/

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: Create skeleton structure for build
        working-directory: ${{ github.workspace }}/pkgs/plugin
        run: |
          # 正しくディレクトリを作成
          New-Item -Path "Source" -ItemType Directory -Force
          New-Item -Path "deps\imgui\misc\cpp" -ItemType Directory -Force
          New-Item -Path "Resources\Win" -ItemType Directory -Force
          New-Item -Path "output\win\release" -ItemType Directory -Force
          New-Item -Path "build\temp\obj" -ItemType Directory -Force
          New-Item -Path "output\win\release\IllustratorDeno.aip\Contents\Resources\pipl" -ItemType Directory -Force

          # Create minimal resource files if they don't exist
          if (-Not (Test-Path "Resources\Win\HelloWorld.rc")) {
            $rcContent = @'
          #include "resource.h"

          16000  PiPL  DISCARDABLE
          BEGIN
              0x0001,
              0L,
              4L,

              'ADBE', 'kind', 0L, 4L, 'SPEA',
              'ADBE', 'ivrs', 0L, 4L, 2L,
              'ADBE', 'wx86', 0L, 12L, "PluginMain\0\0",
              'ADBE', 'pinm', 0L, 12L, "IllustratorDeno"
          END
          '@
            Set-Content -Path "Resources\Win\HelloWorld.rc" -Value $rcContent
          }

          if (-Not (Test-Path "Resources\Win\resource.h")) {
            $resourcehContent = @'
          // Resource header file
          '@
            Set-Content -Path "Resources\Win\resource.h" -Value $resourcehContent
          }

          # Create minimal source files for build testing
          if (-Not (Test-Path "Source\AiDenoPlugin.cpp")) {
            $sourceContent = @'
          // Placeholder for AiDenoPlugin.cpp
          #include <stdio.h>

          extern "C" __declspec(dllexport) void PluginMain() {
              // Plugin entry point
          }
          '@
            Set-Content -Path "Source\AiDenoPlugin.cpp" -Value $sourceContent
          }

          # PIPL署名を生成
          python -c "import sys, json; sys.path.append('..\..\illustrator-sdk\tools\pipl'); from create_pipl import create_pipl; create_pipl('[{\"name\":\"IllustratorDeno\"}, {\"entry_point\":\"PluginMain\"}]')"

          # PIPLファイルが存在しない場合は作成
          if (-Not (Test-Path "plugin.pipl")) {
            $piplContent = @'
          // PIPL
          {
              "name": "IllustratorDeno",
              "entry_point": "PluginMain"
          }
          '@
            Set-Content -Path "plugin.pipl" -Value $piplContent
          }
        shell: pwsh

      - name: Build with Deno script
        working-directory: ${{ github.workspace }}/pkgs/plugin
        run: |
          # 環境変数を使ってVisual Studioのパスを設定
          $env:VS_PATH = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          $env:SDK_PATH = "..\illustrator-sdk"

          # ビルドスクリプトを実行
          deno run --allow-run --allow-read --allow-write --allow-env build-win.ts --release

          # PIPLファイルをリソースディレクトリにコピー
          Copy-Item -Path "plugin.pipl" -Destination "output\win\release\IllustratorDeno.aip\Contents\Resources\pipl\plugin.pipl" -Force
        shell: pwsh

      - name: Upload Windows plugin artifact
        id: upload-windows-artifact
        uses: actions/upload-artifact@v4
        with:
          name: illustrator-deno-windows
          path: ${{ github.workspace }}/pkgs/plugin/output/win/release/IllustratorDeno.aip
          compression-level: 1
          if-no-files-found: error

      - name: Output artifact info
        if: success()
        run: |
          echo "Windows artifact ID: ${{ steps.upload-windows-artifact.outputs.artifact-id }}"
          echo "Download URL: ${{ steps.upload-windows-artifact.outputs.artifact-url }}"
          echo "SHA-256: ${{ steps.upload-windows-artifact.outputs.artifact-digest }}"

  # すべてのビルドが完了した後に通知を送るオプションのジョブ例
  notify:
    needs: [build_macos_plugin, build_windows_plugin]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check build status
        id: check
        run: |
          if [ "${{ needs.build_macos_plugin.result }}" == "success" ] && [ "${{ needs.build_windows_plugin.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      # このステップはGitHub Slackアプリなどの外部通知システムで置き換え可能
      - name: Post build status
        run: |
          if [ "${{ steps.check.outputs.status }}" == "success" ]; then
            echo "✅ All builds completed successfully!"
          else
            echo "❌ Some builds failed!"
          fi
